const Expense = require('../models/expense');
const { Types } = require('mongoose');
const Income = require('../models/income');

exports.getDashboardData = async (req, res) => {
    try {
        if (!req.user || !req.user.id) {
            return res.status(400).json({ message: "User not authenticated" });
        }

        const userId = req.user.id;
        const userObjectId = new Types.ObjectId(String(userId));

        const totalIncome = await Income.aggregate([
            { $match: { userId: userObjectId } },
            { $group: { _id: null, total: { $sum: "$amount" } } }
        ]);

        const totalExpense = await Expense.aggregate([
            { $match: { userId: userObjectId } },
            { $group: { _id: null, total: { $sum: "$amount" } } }
        ]);

        // If no data found, set to zero
        const totalIncomeAmount = totalIncome.length ? totalIncome[0].total : 0;
        const totalExpenseAmount = totalExpense.length ? totalExpense[0].total : 0;

        const last60DaysIncomeTransactions = await Income.find({
            userId: userObjectId,
            date: { $gte: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000) }
        }).sort({ date: -1 });

        const incomeLast60Days = last60DaysIncomeTransactions.reduce(
            (sum, transaction) => sum + transaction.amount,
            0
        );

        const last30DaysExpenseTransactions = await Expense.find({
            userId: userObjectId,
            date: { $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) }
        }).sort({ date: -1 });

        const expensesLast30Days = last30DaysExpenseTransactions.reduce(
            (sum, transaction) => sum + transaction.amount,
            0
        );

        const lastTransactions = [
            ...(await Income.find({ userId: userObjectId })
                .sort({ date: -1 })
                .limit(5))
                .map(txn => ({
                    ...txn.toObject(),
                    type: "income"
                })),
            ...(await Expense.find({ userId: userObjectId })
                .sort({ date: -1 })
                .limit(5))
                .map(txn => ({
                    ...txn.toObject(),
                    type: "expense"
                }))
        ].sort((a, b) => b.date - a.date);

        res.json({
            totalBalance: totalIncomeAmount - totalExpenseAmount,
            totalIncome: totalIncomeAmount,
            totalExpenses: totalExpenseAmount,
            Last30DaysExpenses: {
                total: expensesLast30Days,
                transactions: last30DaysExpenseTransactions
            },
            last60DaysIncome: {
                total: incomeLast60Days,
                transactions: last60DaysIncomeTransactions
            },
            recentTransaction: lastTransactions
        });
    } catch (error) {
        res.status(500).json({ message: "Server Error", error });
    }
};
